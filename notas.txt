Algoritmos de CFOP:

OLL:
Cruz: Aristas Bien Orientadas
R U2 R' U' (R U R' U') R U' R'
R U2 R2 U' R2 U' R2 U2 R
L' U R U' L U R'
R U' L' U R' U' L
R2 D' R U2 R' D R U2 R
r U R' U' r' F R F'
R' F' L' F R F' L F
Punto
R U2 R2 F R F' U2 R' F R F'
F (R U R' U') F' f (R U R' U') f'
M R U R' U r U2 r' U M'
M U' r U2 r' U' R U' R2 r
r' R U (R U R' U') r R2 F R F'
F R U R' d R' U2 R' F R F'
R U R' U R' F R F' U2 R' F R F'
r' R U (R U R' U') r2 R2 U R U' r'
Línea
R U R' U R d' R U' R' F'
R U' y R2 D R' U2 R D' R2 d R'
f (R U R' U') (R U R' U') f'
F (R U R' U') x R U' L U R' U' r'
L Pequeña
r U R' U R U' R' U R U2 r'
R' F R' F' R2 U2 y R' F R F'
F' L' U' L U L' U' L U F
r' U' R U' R' U R U' R' U2 r
R B' R B R2 U2 F R' F' R
F (R U R' U') (R U R' U') F'
Cuadrados
r U2 R' U' R U' r'
l' U2 L U L' U l
Relámpagos
L F R' F R F2 L'
U2 r R2 U' R U' R' U2 R U' M
R U' R' U2 R U y R U' R' U' F'
R2 U R' B' R U' R2 U l U l'
r' U' R U' R' U2 r
F' L' U' L U F U' F' L' U' L U F
L' U L U2 L' U' y' L' U L U F
L2 U' L B L' U L2 U' r' U' r
Pez
F R U' R' U' R U R' F'
L U2 L2 B L B' L U2 L'
R' U' R y' x' R U' R F R U R'
L U L' y x L' U L F' L' U' L
Forma de C
F’ L’ U’ L y’ R U’ R’ U2 R
R U R2 U’ R’ F R U R U’ F’
Forma de L Grande
R' F R U R' F' R y L U' L'
L' B' L R' U' R U L' B L
L F' L' U' L F L' y' R' U R
R B R' L U L' U' R B' R'
Forma de P
F U R U' R' F'
L d R' d' L' U L F L'
F' U' L' U L F
R' d' L d R U' R' F' R
Forma de T
R U R' U' R' F R F'
F R U R' U' F'
Forma de W
R U R' U R U' R' U' R' F R F'
L' U' L U' L' U L U L F' L' F
Forma de Z
R' F (R U R' U') y L' d R
L F' L' U' L U y' R d' L'
Esquinas Bien Orientadas
M' U' M U2 M' U' M
L' (R U R' U') L R' F R F'

PLL:

Básicos (Permutan solo aristas o esquinas)
U1: R U R' U R' U' R2 U' R' U R' U R
U2: R' U R' U' R' U' R' U R U R2
Z: M2 U' M2 U' M' U2 M2 U2 M' U2
H: M2 U M2 U2 M2 U M2
Avanzados
A1: R U R' F' r U R' U' r' F R2 U' R'
A2: R U R2 F' r U R U' r' F R U' R'
E: X' R U' R' D R U R' D' R U R' D R U' R' D'
J: R U R' F' (R U R' U') R' F R2 U' R'
L: R' U' R2 B R' U' R' U R B' R' U R
T: (R U R' U') R' F R2 U' R' U' R U R' F'
F: R' U' F' (R U R' U') R' F R2 U' R' U' R U R' U R
Y: F R U' R' U' R U R' F' (R U R' U') R' F R F'
V: R' U R' U' Y R' F' R2 U' R' U R' F R F
R1: R' U2 R U2 R' F (R U R' U') R' F' R2
R2: R U' R' U' R U R D R' U' R D' R' U2 R'
N1: R U R' U R U R' F' (R U R' U') R' F R2 U' R' U2 R U' R'
N2: R' U' R U2 R' U' R2 B R' U' R' U R B' R' U R U R' U R
G1: R2 u R' U R' U' R u' R2 F' U F
G2: F' U' F R2 u R' U R U' R u' R2
G3: R2 F2 R U2 R U2 R' F (R U R' U') R' F R2
G4: R2 F' R U R U' R' F' R U2 R' U2 R' F2 R2

F2L:

Arista y esquina en la capa superior
Caso 1: U' F' U F
Caso 2: U R U' R'
Caso 3: F' U' F
Caso 4: R U R'
Esquina apuntando con el blanco a un lateral
Caso 5: R U' R' U R U' R' U2
Caso 6: U' R' U2 R U F' U' F
Caso 7: R U' R' U2 F' U' F
Caso 8: F' U F U2 R U R'
Caso 9: U' R U' R' U R U R'
Caso 10: d R' U R U' R' U' R
Caso 11: U F' U' F U2 F' U F
Caso 12: U' R U R' U' R U2 R
Caso 13: U' R U R' U R U R'
Caso 14: U' R U' R' U F' U' F
Caso 15: y' U R' U2 R U2 R' U R
Caso 16: U' R U2 R' U2 R U' R'
Esquina apuntando con el blanco arriba
Caso 17: R U R' U2 (R U R' U') R U R'
Caso 18: R U R' U R U2 R' F' U2 F
Caso 19: F' U2 F U F' U' F
Caso 20: R U2 R' U' R U R'
Caso 21: U' F' U2 F U' F' U F
Caso 22: U R U2 R' U R U' R'
Caso 23: U2 R U R' U R U' R'
Caso 24: U2 F' U' F U' F' U F
Esquina en la capa inferior y arista en la superior
Caso 25: U R U' R' U' F' U F
Caso 26: U' F' U F U R U' R'
Caso 27: F' U F U' F' U F
Caso 28: R U' R' U R U' R'
Caso 29: U' (R U R' U') R U R'
Caso 30: U' R U' R' F' U' F
Esquina en la capa inferior y arista en la capa intermedia
Caso 31: (R U R' U') (R U R' U') R U R'
Caso 32: R U' R' F' U2 F
Caso 33: U' R U2 R' U R U R'
Caso 34: U' R U' R' U2 R U' R'
Caso 35: d R' U' R d' R U R'
Caso 36: U' R U R' d R' U' R
Esquina y arista en la capa inferior
Caso 37: (Resuelto)
Caso 38: R U2 R' U R U2 R' U F' U' F
Caso 39: R U' R' U R U2 R' U R U' R'
Caso 40: (R U R' U') R U2 R' U' R U R'
Caso 41: R U' R' U R' U' R F' U F
Caso 42: F' U F U2 R U R' U R U' R'

Lista de objetivos que pueden realizar los usuarios: (Solo se pueden realizar estos objetivos 4 veces en un mes)

1- Conseguir un nuevo PB: Mejorar el mejor tiempo hecho en la sesion 
100 pts

2- Derrotar al contrincante (Confrontacion): cuando se haga el registro de quien es el ganador darle los puntos al usuario ganador
10 pts

3- Derrotar al contrincante en revancha: 
20 pts

Participacion en un torneo: dependiendo de la ronda se le dara un premio
4- Ganar una ronda: 10pts
5- Llegar a la semifinal 50 pts
6- Ganar el torneo-200pts




export function handleJoinTournament(joinNS) {
  let participantes = [];
  let juezID = [];
  let n_p;
  let ganadores = [];
  let roundParticipants = [];
  let participantesData = {};
  let usuariosData = {};
  let juecesViendoTiempos = [];
  let grupoActual = null;
  let tiemposPorGrupo = {};
  let groups = [];
  let participantSockets = {};
  let torneos = {};

  function reiniciarTorneo() {
    participantes = [];
    juezID = [];
    n_p = undefined;
    ganadores = [];
    roundParticipants = [];
    participantesData = {};
    usuariosData = {};
    juecesViendoTiempos = [];
    grupoActual = null;
    tiemposPorGrupo = {};
    groups = [];
    participantSockets = {};
    console.log("Torneo reiniciado");
  }

  function reiniciarTiempos() {
    tiemposPorGrupo = {};
    roundParticipants.forEach((grupo) => {
      grupo.tiempos1 = [];
      grupo.tiempos2 = [];
      grupo.promedio1 = 0;
      grupo.promedio2 = 0;
    });
    console.log("Tiempos reiniciados");
  }

  joinNS.on("connection", (socket) => {
    console.log("Conectado al espacio de nombres de torneos");

    socket.on("tiemposVistos", (grupo) => {
      const juezEnGrupo = juecesViendoTiempos.find(
        (juez) => juez.userId === socket.userId
      );

      if (juezEnGrupo) {
        const grupoId = grupo.join("-");
        juecesViendoTiempos.push({ grupoId, juezId: socket.userId });

        const tiemposGrupo = tiemposPorGrupo[grupoId] || {};

        juezEnGrupo.emit("tiemposVistos", tiemposGrupo);
      } else {
        console.log("El juez no está en este grupo");
      }
    });

    socket.on("reiniciarTorneo", () => {
      reiniciarTorneo();
      console.log("Torneo reiniciado");
    });

    socket.on("ganadorRonda", ({ ganador, promedioGanador, grupoId }) => {
      const grupo = groups.find((g) => g.grupoId === grupoId);

      if (grupo) {
        const perdedores = grupo.users.filter((userId) => userId !== ganador);
        perdedores.forEach((perdedor) => {
          const perdedorSocket = participantSockets[perdedor];
          if (perdedorSocket) {
            perdedorSocket.emit("redirigir", "/");
          }
        });

        ganadores.push({ userId: ganador, promedio: promedioGanador });
        console.log(`Ganador de la ronda (Grupo ${grupoId}):`, ganador);

        if (ganadores.length === groups.length) {
          reiniciarTiempos();

          if (ganadores.length > 1) {
            const nuevosGrupos = groupParticipants(
              ganadores.map((g) => ({ userId: g.userId })),
              juezID[0]
            );
            groups = nuevosGrupos;
            reiniciarRonda(nuevosGrupos);

            nuevosGrupos.forEach((grupo, index) => {
              const scramble = generarNuevoScramble();
              grupo.users.forEach((userId) => {
                const participante = participantSockets[userId];
                if (participante) {
                  participante.emit("nuevaRonda", {
                    oponentes: grupo.users,
                    scramble,
                    grupoId: index,
                  });
                }
              });
            });

            ganadores = [];
          } else {
            const ganadorAbsoluto = ganadores[0];
            console.log("Ganador absoluto:", ganadorAbsoluto.userId);
            joinNS.emit("torneoTerminado", ganadorAbsoluto.userId);
            reiniciarTorneo();
          }
        }
      }
    });

    socket.on("n_participantes", (n) => {
      socket.n_p = n;
      n_p = n;
      socket.emit("n_participantes", n);
      console.log(`n_participantes: ${socket.n_p}`);
    });

    socket.on("juez", (juez) => {
      socket.juezId = juez;
      juezID.push(socket); // Almacenar el objeto de socket del juez en juezID
      console.log(juezID.length);
      console.log(`Juez connected: ${socket.juezId}`);
      console.log(
        "Jueces:",
        juezID.map((j) => j.juezId)
      );
    });

    socket.on("unirseGrupo", ({ juezId, grupoIndex }) => {
      const juezSocket = joinNS.sockets.get(juezId); // Obtener el objeto de socket del juez utilizando el ID
      if (juezSocket) {
        const grupo = groups[grupoIndex];
        if (grupo) {
          grupo.juez = juezId;
          console.log(`Juez ${juezId} unido al grupo ${grupoIndex}`);
          juezSocket.emit("grupo", {
            juez: juezId,
            users: grupo.users,
            grupoId: grupoIndex,
          });
        } else {
          console.log(`Grupo ${grupoIndex} no encontrado`);
        }
      } else {
        console.log(`Juez ${juezId} no encontrado`);
      }
    });

    socket.on("user", ({ userId, torneoId }) => {
      if (!torneos[torneoId]) {
        torneos[torneoId] = [];
      }

      if (torneos[torneoId].length >= n_p) {
        console.log(
          `El torneo ${torneoId} ya tiene ${n_p} participantes. No se permiten más conexiones.`
        );
        socket.emit("torneo_lleno", torneoId);
        return;
      }

      //torneos[torneoId].push(socket);
      console.log(`User connected: ${userId} (Torneo: ${torneoId})`);
      console.log(
        `Participantes (Torneo ${torneoId}):`,
        torneos[torneoId].map((s) => s.userId)
      );

      participantSockets[userId] = socket;
      usuariosData[userId] = [];

      socket.userId = userId;
      socket.torneoId = torneoId;
      torneos[torneoId].push(socket);
      socket.emit("user", userId);

      if (torneos[torneoId].length === n_p) {
        const participantesTorneo = torneos[torneoId];
        const groups = groupParticipants(participantesTorneo, juezID[0]);
        socket.emit("grupoActualizado", grupoActual);

        juezID.forEach((juezSocket) => {
          if (juezSocket) {
            juezSocket.emit("grupos", groups);
            console.log(`Grupos enviados al juez ${juezSocket.juezId}`);
          }
        });
        groups.forEach((group, index) => {
          const { juez, users } = group;
          const scramble = generarNuevoScramble();
          users.forEach((participantId) => {
            const participantSocket = participantSockets[participantId];
            if (participantSocket && participantSocket.torneoId === torneoId) {
              console.log("Enviando scramble a", participantId);
              participantSocket.emit("paired", {
                juez: juez || "Juez no disponible",
                users: users,
                grupoId: index,
              });
              participantSocket.emit("scramble", scramble);
              participantSocket.emit("grupoId", index);
            } else {
              console.log("Participante no encontrado o torneo incorrecto");
            }
          });
          if (juez) {
            const juezSocket = joinNS.sockets.get(juez);
            if (juezSocket) {
              juezSocket.emit("grupo", {
                juez: juez,
                users: users,
                grupoId: index,
              });
            }
          }
        });
      }
    });

    socket.on("finalRound", () => {
      if (ganadores.length > 1) {
        const nuevosGrupos = groupParticipants(ganadores, juezID[0]);
        nuevosGrupos.forEach((grupo, index) => {
          const scramble = generarNuevoScramble();
          grupo.users.forEach((userId) => {
            const participante = participantSockets[userId];
            if (participante) {
              participante.emit("nuevaRonda", {
                oponentes: grupo.users,
                scramble,
                grupoId: index,
              });
              participante.emit("paired");
            }
          });
        });
        reiniciarRonda(nuevosGrupos);
        ganadores = [];
      }
    });

    socket.on("siguienteGrupo", () => {
      const grupoActualIndex = groups.findIndex((g) => g === grupoActual);
      const siguienteGrupo = groups[grupoActualIndex + 1];

      if (siguienteGrupo) {
        grupoActual = siguienteGrupo; // Actualizar grupoActual en el servidor
        socket.emit("cambiarGrupo", siguienteGrupo);
        socket.emit("unirseGrupo", {
          juezId: juezID[0].juezID,
          grupoIndex: grupoActualIndex + 1,
        });
        socket.emit("grupoActualizado", siguienteGrupo); // Emitir evento con el nuevo grupo actual
      } else {
        // Todos los grupos han terminado, pasamos a la siguiente ronda
        const ganadores = roundParticipants.map((grupo) => {
          const indiceGanador = grupo.promedios.indexOf(
            Math.min(...grupo.promedios)
          );
          return grupo.users[indiceGanador];
        });

        if (ganadores.length > 1) {
          const nuevosGrupos = groupParticipants(ganadores, 2, juezID[0]);
          groups = nuevosGrupos;
          grupoActual = nuevosGrupos[0];

          nuevosGrupos.forEach(([juez, grupo], index) => {
            const scramble = generarNuevoScramble();
            grupo.forEach((participante) => {
              participante.emit("nuevaRonda", {
                oponentes: [juez.userId, ...grupo.map((p) => p.userId)],
                scramble,
                grupoId: index,
              });
            });
          });
        } else {
          // Solo queda un ganador, el torneo ha terminado
          socket.emit("torneoTerminado", ganadores[0].userId);
          navigate("/", { state: { ganador: ganadores[0].userId } });
        }
      }
    });

    socket.on("disconnect", () => {
      console.log(`User disconnected: ${socket.userId}`);
      delete participantSockets[socket.userId];

      for (const torneoId in torneos) {
        torneos[torneoId] = torneos[torneoId].filter(
          (client) => client.userId !== socket.userId
        );
      }

      juezID = juezID.filter((client) => client.juezId !== socket.juezId);
    });

    socket.on("times", (message) => {
      const { time, grupoId } = JSON.parse(message);
      const userId = socket.userId;

      if (grupoId === undefined) {
        console.log("El usuario no está en ningún grupo");
        return;
      }

      const grupo = roundParticipants.find((g) => g.grupoId === grupoId);

      if (!grupo) {
        console.error("Grupo no encontrado");
        return;
      }

      const userIndex = grupo.users.indexOf(userId);

      if (userIndex === -1) {
        console.error("Usuario no encontrado en el grupo");
        return;
      }

      const tiemposKey = `tiempos${userIndex + 1}`;
      const promedioKey = `promedio${userIndex + 1}`;

      if (!grupo[tiemposKey]) {
        grupo[tiemposKey] = [];
      }

      const tiempo = convertTimeToMilliseconds(time);
      grupo[tiemposKey].push(tiempo);
      grupo[promedioKey] =
        grupo[tiemposKey].reduce((a, b) => a + b, 0) / grupo[tiemposKey].length;

      console.log(`Tiempo de ${userId} (user${userIndex + 1}):`, time);
      console.log(`Promedio de ${userId}:`, grupo[promedioKey]);

      const tiemposPorGrupo = {
        [grupoId]: grupo.users.reduce((obj, userId, index) => {
          obj[`user${index + 1}`] = {
            userId,
            tiempos: grupo[`tiempos${index + 1}`] || [],
            promedio: grupo[`promedio${index + 1}`] || 0,
          };
          return obj;
        }, {}),
      };

      const juezId = grupo.juez;
      const juezSocket = juezID.find((j) => j.juezId === juezId);
      if (juezSocket) {
        juezSocket.emit("tiemposUsuarios", tiemposPorGrupo);
        console.log(`Tiempos enviados al juez ${juezId}:`, tiemposPorGrupo);
      } else {
        console.log(`Juez ${juezId} no encontrado`);
      }

      if (
        grupo.users.every(
          (_, index) => grupo[`tiempos${index + 1}`]?.length === 5
        )
      ) {
        const promedios = grupo.users.map(
          (_, index) => grupo[`promedio${index + 1}`]
        );
        const ganadorIndex = promedios.indexOf(Math.min(...promedios));
        const ganador = grupo.users[ganadorIndex];
        const promedioGanador = promedios[ganadorIndex];

        socket.emit("ganadorRonda", {
          ganador,
          promedioGanador,
          grupoId,
        });

        ganadores.push({ userId: ganador, promedio: promedioGanador });
        console.log(`Ganador de la ronda (Grupo ${grupoId}):`, ganador);

        if (ganadores.length === groups.length) {
          reiniciarTiempos();

          if (ganadores.length > 1) {
            const nuevosGrupos = groupParticipants(
              ganadores.map((g) => ({ userId: g.userId })),
              juezID ? juezID[0] : null
            );
            groups = nuevosGrupos;
            reiniciarRonda(nuevosGrupos);

            nuevosGrupos.forEach((grupo, index) => {
              const scramble = generarNuevoScramble();
              grupo.users.forEach((userId) => {
                const participante = participantSockets[userId];
                if (participante) {
                  participante.emit("nuevaRonda", {
                    oponentes: grupo.users,
                    scramble,
                    grupoId: index,
                  });
                }
              });
            });

            ganadores = [];
          } else {
            const ganadorAbsoluto = ganadores[0];
            console.log("Ganador absoluto:", ganadorAbsoluto.userId);
            joinNS.emit("torneoTerminado", ganadorAbsoluto.userId);
            reiniciarTorneo();
          }
        }
      }
    });

    socket.on("nextScramble", () => {
      const userId = socket.userId;
      const participanteData = usuariosData[userId];

      if (!participanteData) {
        console.error("Datos del participante no encontrados");
        return;
      }

      const nuevoScramble = generarNuevoScramble();
      socket.emit("scramble", nuevoScramble);
    });
  });

  function groupParticipants(participantes, juezID) {
    const groups = [];
    const numParticipants = participantes.length;
    const numGroups = Math.floor(numParticipants / 2);

    for (let i = 0; i < numGroups; i++) {
      const user1 = participantes[i * 2];
      const user2 = participantes[i * 2 + 1];
      const juezId = juezID ? juezID.juezId : null;
      const group = {
        juez: juezId,
        users: [user1.userId, user2.userId],
        grupoId: i,
      };
      groups.push(group);

      console.log(`Grupo ${i}:`, {
        juez: juezId || "Sin juez",
        users: [user1.userId, user2.userId],
      });

      roundParticipants.push({
        juez: juezId,
        users: [user1.userId, user2.userId],
        promedios: [0, 0],
        grupoId: i,
      });
    }

    console.log(
      "Grupos formados:",
      groups.map((g) => ({ juez: g.juez || "Sin juez", users: g.users }))
    );

    return groups;
  }

  function convertTimeToMilliseconds(timeString) {
    const [minutes, seconds, milliseconds] = timeString.split(":").map(Number);
    return minutes * 60 * 1000 + seconds * 1000 + milliseconds;
  }

  function reiniciarRonda(nuevosGrupos) {
    roundParticipants = [];
    participantesData = {};
    console.log("participantesData reiniciado:", participantesData);

    nuevosGrupos.forEach((grupo, index) => {
      const { juez, users } = grupo;
      participantesData[users[0]] = [];
      participantesData[users[1]] = [];

      roundParticipants.push({
        juez,
        users,
        promedios: [0, 0],
        grupoId: index,
      });

      console.log(`Grupo ${index}:`, {
        juez: juez || "Sin juez",
        users,
      });
    });

    console.log(
      "roundParticipants:",
      roundParticipants.map((p) => ({
        juez: p.juez,
        users: p.users,
      }))
    );
  }
}

function generarNuevoScramble() {
  const movimientos = ["R", "L", "U", "D", "F", "B"];
  const modificadores = ["", "'", "2"];

  let nuevoScramble = "";
  let ultimoMovimiento = "";

  for (let i = 0; i < 20; i++) {
    let movimientoAleatorio =
      movimientos[Math.floor(Math.random() * movimientos.length)];
    let modificadorAleatorio =
      modificadores[Math.floor(Math.random() * modificadores.length)];

    while (movimientoAleatorio === ultimoMovimiento) {
      movimientoAleatorio =
        movimientos[Math.floor(Math.random() * movimientos.length)];
    }

    nuevoScramble += movimientoAleatorio + modificadorAleatorio + " ";
    ultimoMovimiento = movimientoAleatorio;
  }

  return nuevoScramble.trim();
}
